#ifndef NESTL_PLATFORM_HPP_SAMPLE
#define NESTL_PLATFORM_HPP_SAMPLE


/**
 * @note This header is a sample header for platform-specific macros, types and functions
 *
 * This file should be provided via preprocessor definition like: -DNESTL_PLATFORM_HEADER="nestl/platform.hpp"
 *
 * Usually this file is needed when NESTL is configured without STD support (NESTL_NO_STD)
 */


/**
 * This is definition of platform-specific assert
 */
#define NESTL_PLATFORM_ASSERT(x) my_platform_specific_assert(x)


/**
 * Following defines are needed for system_error.hpp header
 */
#define NESTL_ENOMEM    12
#define NESTL_EINVAL    22
#define NESTL_EOVERFLOW 75


/**
 * @note User also should provide definitions of basic integer types (like cstddef header)
 *
 * there should be typedefs for size_t, ptrdiff_t, int<SIZE>_t, uint<SIZE>_t types
 */
namespace nestl
{

namespace platform
{

typedef unsigned int size_t;
typedef int          ptrdiff_t;

} // namespace platform

} // namespace nestl


/**
 * @note We declare nothrow_t and nothrow in std namespace
 * so we can link with standard libraries even without STD support
 */
namespace std
{

struct nothrow_t {};

extern nothrow_t nothrow;

class bad_alloc
{
};

} // namespace std


void* operator new(nestl::platform::size_t) NESTL_THROW_SPEC(std::bad_alloc);

void* operator new[](nestl::platform::size_t) NESTL_THROW_SPEC(std::bad_alloc);

void operator delete(void*) NESTL_NOEXCEPT_OR_THROW_SPEC;

void operator delete[](void*) NESTL_NOEXCEPT_OR_THROW_SPEC;

void* operator new(nestl::platform::size_t, const std::nothrow_t&) NESTL_NOEXCEPT_SPEC;

void* operator new[](nestl::platform::size_t, const std::nothrow_t&) NESTL_NOEXCEPT_SPEC;

void operator delete(void*, const std::nothrow_t&) NESTL_NOEXCEPT_SPEC;

void operator delete[](void*, const std::nothrow_t&) NESTL_NOEXCEPT_SPEC;

// Default placement versions of operator new.
inline void* operator new(nestl::platform::size_t, void* location) NESTL_NOEXCEPT_SPEC
{
    return location;
}
inline void* operator new[](nestl::platform::size_t, void* location) NESTL_NOEXCEPT_SPEC
{
    return location;
}

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) NESTL_NOEXCEPT_SPEC
{
}

inline void operator delete[](void*, void*) NESTL_NOEXCEPT_SPEC
{
}


#endif /* NESTL_PLATFORM_HPP_SAMPLE */
